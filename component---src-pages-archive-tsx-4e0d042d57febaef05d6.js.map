{"version":3,"sources":["webpack:///./src/pages/archive.tsx"],"names":["posts","data","allMarkdownRemark","edges","map","node","frontmatter","items","post","year","moment","date","format","concat","years","Object","keys","sort","reverse","className","title","keywords","key","pageQuery"],"mappings":"oPAsBe,sBAAqB,IAC5BA,EAD4B,EAAlBC,KACGC,kBAAkBC,MAAMC,KAAI,qBAAGC,KAAQC,eACpDC,EAA4C,GAClD,EAAmBP,EAAnB,wDAA0B,yFAAfQ,EAAe,EAClBC,EAAOC,IAAOF,EAAKG,MAAMC,OAAO,QACtCL,EAAME,IAASF,EAAME,IAAS,IAAII,OAAOL,GAG3C,IAAMM,EAAkBC,OAAOC,KAAKT,GAGpC,OAFAO,EAAMG,OAAOC,UAGX,kBAAC,IAAD,CAAQC,UAAU,WAChB,kBAAC,IAAD,CAAKC,MAAM,aAAaC,SAAU,CAAC,SAAD,yBACjCP,EAAMV,KAAI,SAAAK,GAAI,OACb,kBAAC,IAAD,CAASa,IAAKb,EAAMW,MAAOX,EAAMF,MAAOA,EAAME,UAM/C,IAAMc,EAAY","file":"component---src-pages-archive-tsx-4e0d042d57febaef05d6.js","sourcesContent":["import React from 'react';\nimport moment from 'moment';\n\nimport { Layout } from '@/containers/layout';\nimport SEO from '@/components/seo';\nimport Archive from '@/components/archive';\nimport { graphql, PageRendererProps } from 'gatsby';\nimport { PostMeta } from '@/components/archive-content';\n\ntype PostMetadata = Pick<PostMeta, 'path' | 'title' | 'date'>;\ninterface Props extends PageRendererProps {\n  data: {\n    allMarkdownRemark: {\n      edges: Array<{\n        node: {\n          frontmatter: PostMetadata;\n        };\n      }>;\n    };\n  };\n}\n\nexport default ({ data }: Props) => {\n  const posts = data.allMarkdownRemark.edges.map(({ node: { frontmatter: post } }) => post);\n  const items: { [year: string]: PostMetadata[] } = {};\n  for (const post of posts) {\n    const year = moment(post.date).format('YYYY');\n    items[year] = (items[year] || []).concat(post);\n  }\n\n  const years: string[] = Object.keys(items);\n  years.sort().reverse();\n\n  return (\n    <Layout className=\"archive\">\n      <SEO title=\"Micalgenus\" keywords={[`gatsby`, `application`, `react`]} />\n      {years.map(year => (\n        <Archive key={year} title={year} items={items[year]} />\n      ))}\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          frontmatter {\n            path\n            title\n            date\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}