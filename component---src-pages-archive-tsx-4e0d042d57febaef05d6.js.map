{"version":3,"sources":["webpack:///./src/pages/archive.tsx"],"names":["posts","data","allMarkdownRemark","edges","map","node","frontmatter","items","post","year","moment","date","format","concat","years","Object","keys","sort","reverse","className","title","keywords","key","pageQuery"],"mappings":"oPAsBe,sBAAqB,IAC5BA,EAD4B,EAAlBC,KACGC,kBAAkBC,MAAMC,KAAI,qBAAGC,KAAQC,eACpDC,EAA4C,GAClD,EAAmBP,EAAnB,wDAA0B,yFAAfQ,EAAe,EAClBC,EAAOC,IAAOF,EAAKG,MAAMC,OAAO,QACtCL,EAAME,IAASF,EAAME,IAAS,IAAII,OAAOL,GAG3C,IAAMM,EAAkBC,OAAOC,KAAKT,GAGpC,OAFAO,EAAMG,OAAOC,UAGX,kBAAC,IAAD,CAAQC,UAAU,WAChB,kBAAC,IAAD,CAAKC,MAAM,aAAaC,SAAU,CAAC,SAAD,yBACjCP,EAAMV,KAAI,SAAAK,GAAI,OACb,kBAAC,IAAD,CAASa,IAAKb,EAAMW,MAAOX,EAAMF,MAAOA,EAAME,UAM/C,IAAMc,EAAY","file":"component---src-pages-archive-tsx-4e0d042d57febaef05d6.js","sourcesContent":["import React from 'react';\r\nimport moment from 'moment';\r\n\r\nimport { Layout } from '@/containers/layout';\r\nimport SEO from '@/components/seo';\r\nimport Archive from '@/components/archive';\r\nimport { graphql, PageRendererProps } from 'gatsby';\r\nimport { PostMeta } from '@/components/archive-content';\r\n\r\ntype PostMetadata = Pick<PostMeta, 'path' | 'title' | 'date'>;\r\ninterface Props extends PageRendererProps {\r\n  data: {\r\n    allMarkdownRemark: {\r\n      edges: Array<{\r\n        node: {\r\n          frontmatter: PostMetadata;\r\n        };\r\n      }>;\r\n    };\r\n  };\r\n}\r\n\r\nexport default ({ data }: Props) => {\r\n  const posts = data.allMarkdownRemark.edges.map(({ node: { frontmatter: post } }) => post);\r\n  const items: { [year: string]: PostMetadata[] } = {};\r\n  for (const post of posts) {\r\n    const year = moment(post.date).format('YYYY');\r\n    items[year] = (items[year] || []).concat(post);\r\n  }\r\n\r\n  const years: string[] = Object.keys(items);\r\n  years.sort().reverse();\r\n\r\n  return (\r\n    <Layout className=\"archive\">\r\n      <SEO title=\"Micalgenus\" keywords={[`gatsby`, `application`, `react`]} />\r\n      {years.map(year => (\r\n        <Archive key={year} title={year} items={items[year]} />\r\n      ))}\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            path\r\n            title\r\n            date\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}