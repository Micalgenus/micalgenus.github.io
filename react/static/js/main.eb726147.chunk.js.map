{"version":3,"sources":["Containers/Layout/Components/Header/Header.js","Containers/Layout/Components/Header/index.js","Containers/Layout/Layout.js","Containers/Layout/index.js","Containers/index.js","Router.js","App.js","serviceWorker.js","index.js"],"names":["LayoutHeader","react_default","a","createElement","this","props","routers","map","router","idx","path","Link","to","title","Component","defaultProps","Header","Layout","BrowserRouter","react","fallback","Switch","route","Route","key","exact","component","Router","lazy","__webpack_require__","e","then","bind","App","Containers","Object","assign","Boolean","window","location","hostname","match","rootElement","document","getElementById","hasChildNodes","ReactDOM","hydrate","src_App","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qRAIqBA,mLAEjB,OAAOC,EAAAC,EAAAC,cAAA,WAAMC,KAAKC,MAAMC,QAAQC,IAAI,SAACC,EAAQC,GAAT,OAAkBD,EAAOE,KAAOT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMC,GAAIJ,EAAOE,MAAOF,EAAOK,OAAgB,eAF7EC,aAM1Cd,EAAae,aAAe,CAC1BT,QAAS,ICTIU,QCKMC,2LAEjB,OACEhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACEjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACa,EAAD,CAAQV,QAASF,KAAKC,MAAMC,UAC5BL,EAAAC,EAAAC,cAACgB,EAAA,SAAD,CAAUC,SAAUnB,EAAAC,EAAAC,cAAA,0BAClBF,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACGjB,KAAKC,MAAMC,QAAQC,IAAI,SAACe,EAAOb,GAAR,OACtBa,EAAMR,UAAYb,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOC,IAAKf,EAAKgB,MAAOH,EAAMG,MAAOf,KAAMY,EAAMZ,KAAMgB,UAAWJ,EAAMR,YAAgB,kBATtFA,cAmBpCG,EAAOF,aAAe,CACpBT,QAAS,ICzBIW,ICAAA,EDAAA,EEGAU,EAAA,CAAC,CAAEd,MAAO,SAAKC,UAHjBc,eAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,aAGuBtB,KAAM,IAAKe,OAAO,GAAQ,CAAEZ,MAAO,eAAMC,UAFtEc,eAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,aAEiFtB,KAAM,WCMrGuB,mLAJX,OAAOhC,EAAAC,EAAAC,cAAC+B,EAADC,OAAAC,OAAA,GAAYhC,KAAKC,MAAjB,CAAwBC,QAASqB,YAF1Bb,aCOEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCVnC,IAAMC,EAAcC,SAASC,eAAe,QAExCF,EAAYG,gBACdC,IAASC,QAAQ9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASN,GAE1BI,IAASG,OAAOhD,EAAAC,EAAAC,cAAC6C,EAAD,MAASN,GDwGrB,kBAAmBQ,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.eb726147.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nexport default class LayoutHeader extends Component {\n  render() {\n    return <div>{this.props.routers.map((router, idx) => (router.path ? <Link to={router.path}>{router.title}</Link> : null))}</div>;\n  }\n}\n\nLayoutHeader.defaultProps = {\n  routers: [],\n};\n\nLayoutHeader.propTypes = {\n  routers: PropTypes.array,\n};\n","import Header from './Header';\n\nexport default Header;\n","import React, { Suspense, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Header } from './Components';\n\nimport './Layout.scss';\n\nexport default class Layout extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <Header routers={this.props.routers} />\n          <Suspense fallback={<div>Loading...</div>}>\n            <Switch>\n              {this.props.routers.map((route, idx) =>\n                route.Component ? <Route key={idx} exact={route.exact} path={route.path} component={route.Component} /> : null\n              )}\n            </Switch>\n          </Suspense>\n        </div>\n      </Router>\n    );\n  }\n}\n\nLayout.defaultProps = {\n  routers: [],\n};\n\nLayout.propTypes = {\n  routers: PropTypes.array,\n};\n","import Layout from './Layout';\n\nexport default Layout;\n","import Layout from \"./Layout\";\n\nexport default Layout;\n","import { lazy } from 'react';\n\nconst Main = lazy(() => import('./Pages/Main'));\nconst Introduce = lazy(() => import('./Pages/Introduce'));\n\nexport default [{ title: '홈', Component: Main, path: '/', exact: true }, { title: '소개', Component: Introduce, path: '/intro' }];\n","import React, { Component } from 'react';\nimport Layout from './Containers';\n\nimport Router from './Router';\n\nclass App extends Component {\n  render() {\n    return <Layout {...this.props} routers={Router} />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit http://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log('New content is available and will be used when all tabs for this page are closed. See http://bit.ly/CRA-PWA.');\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import '@babel/polyfill';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById('root');\n\nif (rootElement.hasChildNodes()) {\n  ReactDOM.hydrate(<App />, rootElement);\n} else {\n  ReactDOM.render(<App />, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}