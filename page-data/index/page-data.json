{"componentChunkName":"component---src-pages-index-tsx","path":"/","webpackCompilationHash":"3114e929eeb99e438454","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"excerpt":"Travis-ci를 사용하여 gcloud명령어를 사용할 경우 Travis내부 설정에 의해서 프로젝트 ID가 제대로 적용되지 않는 경우가 있다. 이 경우 와 로 프로젝트 ID가 설정돼서 아래와 같은 에러가 발생하였다. 이 문제를 해결하기 위해서 traivs에서 내부적으로 환경변수를 추가하여 해결하였다.","frontmatter":{"path":"/articles/2019-07/Travis-ci-gcloud-프로젝트-설정","title":"Travis-ci 환경에서 gcloud 프로젝트 설정","date":"Jul 14, 2019"}}},{"node":{"excerpt":"Babel을 이용하여 Typescript를 사용하게 될 경우 mocha를 사용하기 위해서는 babel-register를 사용해야 한다. 와 같이 파일을 만들어준다. babel 7버전 이상의 경우 를 그 이전의 버전은 를 사용하면 된다. 위와 같이 적용하면 파일을 적용시킬 수 있다. 를 사용하여 typescript를 사용한다. mocha의 coverage를 사용하기 위해서 nyc라는 라이브러리를 사용한다. 이를 사용하기 위해서 파일을 생성한다. 다음과 같은 설정처럼 사용할 수 있다. 옵션을 통하여 typescript파일을 허용하면 mocha를 이용하여 를 측정할 수 있다. 그 후 다음과 같은 명령어를 사용하면 coverage가 측정된다.","frontmatter":{"path":"/articles/2019-04/Typescript-mocha-for-coverage-with-babel","title":"Babel을 이용한 Typescript환경에서 mocha coverage사용하기","date":"Apr 26, 2019"}}},{"node":{"excerpt":"Google Cloud Datastore를 사용할 때 order를 사용하기 위해서는 index를 만들어야한다. 이를 만들기 위해서 를 사용할 수 있다. 는 Google Cloud Platform Console에 들어가면 을 이용하여 쉽게 사용할 수 있다. 우선 수동으로 index를 만들기 위해서는 정의를 해줘야 한다. 을 다음과 같이 작성한다. 하고자 하는 정렬에 따라서 내용을 채우면 된다. 그 후, 다음 명령어를 통하여 인덱스를 생성 할 수 있다. 참고: 공식문서","frontmatter":{"path":"/articles/2019-04/Google-Cloud-Datastore-인덱스-수동-생성","title":"Google Cloud Datastore 인덱스 수동 생성","date":"Apr 02, 2019"}}},{"node":{"excerpt":"Apollo client를 사용할 때, header를 설정하려면 ApolloClient를 다음과 같이 하면된다. 를 사용하여 를 만든 후, link에 을 이용하여 적용시켜주면 된다.","frontmatter":{"path":"/articles/2019-03/Apollo-client에-헤더-추가하기","title":"Apollo client에 헤더 추가하기","date":"Mar 30, 2019"}}},{"node":{"excerpt":"Next.js를 사용하면서 브라우저에서 .env 설정을 받아들이지 못하는 문제가 있었습니다. 이를 설정을 이용하여 해결할 수 있습니다. 에 다음과 같이 추가하여 사용할 수 있습니다. 여기서 설정에 관한 부분은 추가적으로 해주어야 하기 때문에 node-runtime-config를 사용하여 편리하게 구성할 수 있습니다.","frontmatter":{"path":"/articles/2019-03/Nextjs-publicRuntimeConfig-적용","title":"Nextjs publicRuntimeConfig 적용","date":"Mar 29, 2019"}}},{"node":{"excerpt":"React프레임워크인 Next.js에서 polyfill을 적용할 때, webpack의 설정을 다음과 같이 추가하면 된다. next.config.js 위와 같이 추가한 후, .babelrc의 프리셋중 useBuiltIns를 “entry”로 변경해준다. .babelrc 마지막으로 파일을 만들어 하고자 하는 polyfill 설정을 적용하면 된다. 참고: 예제","frontmatter":{"path":"/articles/2019-03/Nextjs-custom-polyfill","title":"Next.js Custom polyfill 적용하기","date":"Mar 26, 2019"}}},{"node":{"excerpt":"Node.js를 사용할 때, 특정 모듈을 import한 그대로 export하고 싶은 경우 다음과 같이 사용할 수 있다.","frontmatter":{"path":"/articles/2019-03/Nodejs-import후-export하기","title":"Nodejs import후 export하기","date":"Mar 23, 2019"}}},{"node":{"excerpt":"를 사용할 때 외부 접속 및 일반 사용자계정으로 접속을 하려면 추가설정이 필요하다. 해당 옵션을 사용하려면, 와 같이 추가해야 한다. 이를 CentOS기준으로 에 설정하면 된다. 그 후, 재시작 하고, 외부에서 접속을 하기 위해서 방화벽에 해당 포트를 추가해주면 된다.","frontmatter":{"path":"/articles/2019-03/Docker-외부-접속-허용","title":"Docker 외부 접속 허용","date":"Mar 12, 2019"}}},{"node":{"excerpt":"현재 Create React App(v2.1.8이하)을 사용할 경우 Jest에서 다음과 같은 에러가 발생한다. 이슈 이 에러를 따라가보면 Jest에서 다음과 같이 해결하였다. 우선 아래의 구문이 문제를 발생시킨다. 그렇기에 이를 다음과 같이 패치하였다. 이 문제가 발생한 이유를 살펴보면 node.js에서 로 업데이트 할 때 다음과 같은 부분이 추가되었다. 해당 부분을 보게되면, process객체에 멤버를 하게 정의하였기 때문에, Jest에서 문제가 발생하였다. 그렇기에 Jest v24.2.0-alpha.0에서 패치가 되어 정상적으로 작동한다. 하지만, 현재 create-react-app의 경우는 jest를 을 사용하기 때문에 문제가 해결되지 않고 있다. 이를 해결할 PR이 있지만 아직 받아들여지지 않았다. create-react-app을 사용하지 않을 경우에는, jest…","frontmatter":{"path":"/articles/2019-03/Create-React-App-Jest-error-over-nodejs-11.11","title":"Create React App Jest error over nodejs 11.11","date":"Mar 11, 2019"}}},{"node":{"excerpt":"javascript에서 jQuery를 사용하지 않고, 을 사용해 스크롤위치를 변경시킬 때 애니메이션을 추가하고 싶었다. 의 경우는 다음과 같이 지원하지 않는 브라우저가 많았다. 이를 해결할 smoothscroll-polyfill모듈이 있어 이를 사용하기로 했다. 사용법은 다음과 같다. 사용하기 전에 선언을 해준다. 그 후, 사용할 을 다음과 같이 수정해준다.","frontmatter":{"path":"/articles/2019-03/CSS-scrolling-animation","title":"CSS scrolling animation","date":"Mar 06, 2019"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}