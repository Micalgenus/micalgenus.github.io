{"version":3,"sources":["containers/Layout/Components/Header/index.js","containers/Layout/Layout.js","containers/Layout/index.js","containers/index.js","Router.js","App.js","serviceWorker.js","index.js"],"names":["LayoutHeader","react_default","a","createElement","className","Link","to","this","props","routers","map","router","idx","path","key","title","Component","defaultProps","Layout","BrowserRouter","Header_LayoutHeader","react","fallback","Switch","route","Route","exact","component","Main","lazy","__webpack_require__","e","then","bind","Projects","parser","document","href","homepage","pathPrefix","pathname","Router","v","Object","objectSpread","App","containers","assign","Boolean","window","location","hostname","match","rootElement","getElementById","hasChildNodes","ReactDOM","hydrate","src_App","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8OAIqBA,mLAEjB,OACEC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,KAAT,6BAGFL,EAAAC,EAAAC,cAAA,WACGI,KAAKC,MAAMC,QAAQC,IAAI,SAACC,EAAQC,GAAT,OACtBD,EAAOE,MAAwB,MAAhBF,EAAOE,KACpBZ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMS,IAAKF,EAAKN,GAAIK,EAAOE,MACxBF,EAAOI,OAER,gBAf0BC,aAuB1ChB,EAAaiB,aAAe,CAC1BR,QAAS,eCrBUS,mLAEjB,OACEjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACElB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiB,EAAD,CAAQX,QAASF,KAAKC,MAAMC,UAC5BR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACkB,EAAA,SAAD,CAAUC,SAAUrB,EAAAC,EAAAC,cAAA,0BAClBF,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACGhB,KAAKC,MAAMC,QAAQC,IAAI,SAACc,EAAOZ,GAAR,OACtBY,EAAMR,UAAYf,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOX,IAAKF,EAAKc,MAAOF,EAAME,MAAOb,KAAMW,EAAMX,KAAMc,UAAW,SAAAnB,GAAK,OAAIP,EAAAC,EAAAC,cAACqB,EAAMR,UAAcR,MAAgB,mBAVhHQ,aAqBpCE,EAAOD,aAAe,CACpBR,QAAS,IC3BIS,ICAAA,EDAAA,kBECTU,EAAOC,eAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,aAElBC,EAAWL,eAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,aAEtBE,EAASC,SAASjC,cAAc,KACtCgC,EAAOE,KAAOC,KAAY,wBAE1B,IAAMC,EAAiC,MAApBJ,EAAOK,SAAmB,GAAKL,EAAOK,SAG1CC,EAAA,CACb,CAAE1B,MAAO,SAAKC,UAAWY,EAAMf,KAAM,IAAKa,OAAO,GAEjD,CAAEX,MAAO,2BAAQC,UAAWkB,EAAUrB,KAAM,cAC5CH,IAAI,SAAAgC,GAAC,OAAAC,OAAAC,EAAA,EAAAD,CAAA,GAAUD,EAAV,CAAa7B,MANCA,EAMkB6B,EAAE7B,KANZ0B,EAAa1B,KAArB,IAAAA,ICANgC,mLAJX,OAAO5C,EAAAC,EAAAC,cAAC2C,EAADH,OAAAI,OAAA,GAAYxC,KAAKC,MAAjB,CAAwBC,QAASgC,YAF1BzB,aCOEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnC,IAAMC,EAAcjB,SAASkB,eAAe,QAExCD,EAAYE,gBACdC,IAASC,QAAQxD,EAAAC,EAAAC,cAACuD,EAAD,MAASL,GAE1BG,IAASG,OAAO1D,EAAAC,EAAAC,cAACuD,EAAD,MAASL,GD4FrB,kBAAmBO,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.8d22ff07.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nexport default class LayoutHeader extends Component {\n  render() {\n    return (\n      <header>\n        <div className=\"blur\" />\n        <div>\n          <Link to=\"/\">Han GyeongSu's Portfolio</Link>\n        </div>\n\n        <nav>\n          {this.props.routers.map((router, idx) =>\n            router.path && router.path !== '/' ? (\n              <Link key={idx} to={router.path}>\n                {router.title}\n              </Link>\n            ) : null\n          )}\n        </nav>\n      </header>\n    );\n  }\n}\n\nLayoutHeader.defaultProps = {\n  routers: [],\n};\n\nLayoutHeader.propTypes = {\n  routers: PropTypes.array,\n};\n","import React, { Suspense, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Header } from './Components';\n\nimport './Layout.scss';\n\nexport default class Layout extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <Header routers={this.props.routers} />\n          <div className=\"container\">\n            <Suspense fallback={<div>Loading...</div>}>\n              <Switch>\n                {this.props.routers.map((route, idx) =>\n                  route.Component ? <Route key={idx} exact={route.exact} path={route.path} component={props => <route.Component {...props} />} /> : null\n                )}\n              </Switch>\n            </Suspense>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nLayout.defaultProps = {\n  routers: [],\n};\n\nLayout.propTypes = {\n  routers: PropTypes.array,\n};\n","import Layout from './Layout';\n\nexport default Layout;\n","import Layout from './Layout';\n\nexport default Layout;\n","import { lazy } from 'react';\nimport { homepage } from 'package.json';\n\nconst Main = lazy(() => import('@/Pages/Main'));\n// const Introduce = lazy(() => import('@/Pages/Introduce'));\nconst Projects = lazy(() => import('@/Pages/Projects'));\n\nconst parser = document.createElement('a');\nparser.href = homepage || 'http://localhost:3000';\n\nconst pathPrefix = parser.pathname === '/' ? '' : parser.pathname;\nconst appendPrefix = path => pathPrefix + path;\n\nexport default [\n  { title: '홈', Component: Main, path: '/', exact: true },\n  // { title: '소개', Component: Introduce, path: '/intro' },\n  { title: '프로젝트', Component: Projects, path: '/projects' },\n].map(v => ({ ...v, path: appendPrefix(v.path) }));\n","import React, { Component } from 'react';\nimport Layout from '@/Containers';\n\nimport Router from '@/Router';\n\nclass App extends Component {\n  render() {\n    return <Layout {...this.props} routers={Router} />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit http://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) return;\n\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log('New content is available and will be used when all tabs for this page are closed. See http://bit.ly/CRA-PWA.');\n\n              // Execute callback\n              if (config && config.onUpdate) config.onUpdate(registration);\n            } else {\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) config.onSuccess(registration);\n            }\n          }\n        };\n      };\n    })\n    .catch(error => console.error('Error during service worker registration:', error));\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie9';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from '@/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById('root');\n\nif (rootElement.hasChildNodes()) {\n  ReactDOM.hydrate(<App />, rootElement);\n} else {\n  ReactDOM.render(<App />, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}